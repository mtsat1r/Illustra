name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: read # 既知の問題を取得するための権限

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # すべての履歴を取得して変更履歴を生成するため

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore src/Illustra.csproj

      - name: Display GitVersion Info
        run: |
          dotnet tool install --global GitVersion.Tool
          dotnet gitversion /config src/GitVersion.yml /output buildserver
          dotnet gitversion /config src/GitVersion.yml /output json
          echo "Assembly Version: $env:GitVersion_AssemblySemVer"
          echo "File Version: $env:GitVersion_AssemblySemFileVer"
          echo "Informational Version: $env:GitVersion_InformationalVersion"

      - name: Build
        run: dotnet build src/Illustra.csproj --no-restore --configuration Release

      - name: Publish
        run: dotnet publish src/Illustra.csproj -c Release -o publish --self-contained true -r win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Create ZIP archive
        shell: bash # WindowsでもBashで統一
        run: |
          cd publish
          7z a -tzip "../Illustra-${GITHUB_REF_NAME}.zip" *

      - name: Read Release Notes
        id: read_release_notes
        shell: bash
        run: |
          if [ -f ".github/workflows/summary.txt" ]; then
            notes=$(cat .github/workflows/summary.txt | tr -d '\r') # Windowsの改行コード対策
            if [ -z "$notes" ]; then
              notes="- メンテナンスの改善とバグ修正"
            fi
          else
            notes="- メンテナンスの改善とバグ修正\n- アプリケーションのパフォーマンス向上"
          fi
          # 複数行出力をEOFで設定
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$notes" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Get Known Issues
        id: issues
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # GraphQLクエリを1行で作成
          repo_owner=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f1)
          repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          query="query { repository(owner: \\\"$repo_owner\\\", name: \\\"$repo_name\\\") { issues(first: 5, states: OPEN, labels: [\\\"bug\\\"]) { nodes { title url } } } }"

          # GitHub APIにリクエスト
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" \
            -d "{\"query\": \"$query\"}" https://api.github.com/graphql)

          # 既知の問題リストを生成
          issues=$(echo "$response" | jq -r '.data.repository.issues.nodes[] | "- [\(.title)](\(.url))"')

          # 既知の問題がない場合のデフォルトメッセージ
          if [ -z "$issues" ]; then
            issues="- 現在、既知の問題はありません。"
          fi

          # 複数行出力をEOFで設定
          echo "issues<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$issues" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            Illustra-${{ github.ref_name }}.zip
          body: |
            ## 🚀 Illustra ${{ github.ref_name }}

            ### 📦 インストール方法
            1. Illustra-${{ github.ref_name }}.zip をダウンロード
            2. お好みの場所に展開
            3. Illustra.exe を実行

            ### 💻 動作環境
            - Windows 10/11
            - .NET 9.0 以降（実行ファイルに同梱）

            ### 📝 変更点
            ${{ steps.read_release_notes.outputs.summary }}

            ### 🔍 既知の問題
            ${{ steps.issues.outputs.issues }}
