name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: read # 既知の問題を取得するための権限

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # すべての履歴を取得して変更履歴を生成するため

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore src/Illustra.csproj

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '5.12.0'  # 厳密に5.12.0を指定

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: true
          configFilePath: ${{ github.workspace }}/src/GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
      - name: Build
        run: dotnet build src/Illustra.csproj --configuration Release

      - name: Publish
        run: dotnet publish src/Illustra.csproj -c Release -o publish --self-contained true -r win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true

      - name: Create ZIP archive
        shell: bash # WindowsでもBashで統一
        run: |
          cd publish
          7z a -tzip "../Illustra-${GITHUB_REF_NAME}.zip" *

      - name: Generate Release Notes
        id: read_release_notes
        shell: bash
        run: |
          # 最新のタグを取得（現在のタグ）
          current_tag=${GITHUB_REF_NAME}

          # 1つ前のタグを取得
          previous_tag=$(git describe --tags --abbrev=0 ${current_tag}^ 2>/dev/null || echo "")

          if [ -z "$previous_tag" ]; then
            # 前回のタグがない場合は、全てのコミットを対象とする
            commits=$(git log --pretty=format:"- %s" --reverse)
          else
            # 前回のタグから現在のタグまでのコミットを取得
            commits=$(git log --pretty=format:"- %s" --reverse ${previous_tag}..${current_tag})
          fi

          # コミットメッセージをカテゴリごとに整理
          features=$(echo "$commits" | grep -i "^- feat:" || echo "")
          fixes=$(echo "$commits" | grep -i "^- fix:" || echo "")
          other=$(echo "$commits" | grep -v "^- feat:" | grep -v "^- fix:" || echo "")

          # Create separate outputs for Japanese and English sections
          jp_output=""
          en_output=""

          if [ ! -z "$features" ]; then
            jp_output+="✨ 新機能:\n$features\n\n"
            en_output+="✨ New Features:\n$features\n\n"
          fi
          if [ ! -z "$fixes" ]; then
            jp_output+="🐛 バグ修正:\n$fixes\n\n"
            en_output+="🐛 Bug Fixes:\n$fixes\n\n"
          fi
          if [ ! -z "$other" ]; then
            jp_output+="🔧 その他の変更:\n$other"
            en_output+="🔧 Other Changes:\n$other"
          fi

          # Create final output
          output="$jp_output"

          # 出力が空の場合のデフォルトメッセージ (日本語と英語セクションを分離)
          if [ -z "$output" ]; then
            jp_output="- メンテナンスの改善とバグ修正"
            en_output="- Maintenance improvements and bug fixes"
            output="$jp_output"
          fi

          # 複数行出力をEOFで設定
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Get Known Issues
        id: issues
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # GraphQLクエリを1行で作成
          repo_owner=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f1)
          repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          query="query { repository(owner: \\\"$repo_owner\\\", name: \\\"$repo_name\\\") { issues(first: 5, states: OPEN, labels: [\\\"bug\\\"]) { nodes { title url } } } }"

          # GitHub APIにリクエスト
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" \
            -d "{\"query\": \"$query\"}" https://api.github.com/graphql)

          # 複数行出力をEOFで設定
          echo "issues<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$issues" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            Illustra-${{ github.ref_name }}.zip
          body: |
            ## 🚀 Illustra ${{ github.ref_name }}

            ### 日本語

            #### 📦 インストール方法
            1. Illustra-${{ github.ref_name }}.zip をダウンロード
            2. お好みの場所に展開
            3. Illustra.exe を実行

            #### 💻 動作環境
            - Windows 10/11
            - .NET 9.0 以降（実行ファイルに同梱）

            #### 📝 変更点
            ${{ steps.read_release_notes.outputs.summary }}

            #### 🔍 既知の問題
            - Issues タブを確認してください

            ---

            ### English

            #### 📦 Installation
            1. Download Illustra-${{ github.ref_name }}.zip
            2. Extract to your preferred location
            3. Run Illustra.exe

            #### 💻 System Requirements
            - Windows 10/11
            - .NET 9.0 or later (included in executable)

            #### 📝 Changes
            ${{ steps.read_release_notes.outputs.summary }}

            #### 🔍 Known Issues
            - Check the Issues tab
